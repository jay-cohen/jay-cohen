<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-27T15:17:38+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Freelance App Developer, iPhone, iPad, Apple Watch, Apple TV - UK</title><subtitle>Based in Yorkshire I’ve been lucky enough to work with clients across the world building amazing products in all kinds of sectors including not for profit and sports apparel.</subtitle><entry><title type="html">Geofencing in iOS</title><link href="http://localhost:4000/blog/geofencing-in-ios" rel="alternate" type="text/html" title="Geofencing in iOS" /><published>2019-04-25T00:00:00+01:00</published><updated>2019-04-25T00:00:00+01:00</updated><id>http://localhost:4000/blog/Geofencing-In-iOS</id><content type="html" xml:base="http://localhost:4000/blog/geofencing-in-ios">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;doggyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dogName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dogName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;your dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dogName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;some-great-heading-h2&quot;&gt;Some great heading (h2)&lt;/h2&gt;

&lt;p&gt;Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu.&lt;/p&gt;

&lt;p&gt;Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;h2 id=&quot;another-great-heading-h2&quot;&gt;Another great heading (h2)&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum.&lt;/p&gt;

&lt;p&gt;Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3-1&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This quote will change your life. It will reveal the secrets of the universe, and all the wonders of humanity. Don’t misuse it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt.&lt;/p&gt;

&lt;h3 id=&quot;some-great-subheading-h3-2&quot;&gt;Some great subheading (h3)&lt;/h3&gt;

&lt;p&gt;Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum.&lt;/p&gt;

&lt;section class=&quot;download-box&quot;&gt;
  &lt;h3&gt;Download the full Xcode project&lt;/h3&gt;
&lt;/section&gt;</content><author><name>Jay Cohen</name></author><category term="iOS," /><category term="location" /><summary type="html">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit.</summary></entry><entry><title type="html">10 Enterprise mobile development tips for entrepreneurs/developers</title><link href="http://localhost:4000/blog/10-Enterprise-mobile-development-tips" rel="alternate" type="text/html" title="10 Enterprise mobile development tips for entrepreneurs/developers" /><published>2019-03-14T00:00:00+00:00</published><updated>2019-03-14T00:00:00+00:00</updated><id>http://localhost:4000/blog/10-Enterprise-mobile-development-tips</id><content type="html" xml:base="http://localhost:4000/blog/10-Enterprise-mobile-development-tips">&lt;h2 id=&quot;1-organise-the-project&quot;&gt;1. Organise the project&lt;/h2&gt;
&lt;p&gt;Before starting the project it’s important to know where to start (ancient proverb). Group dependent parts of your apps functionality and create tickets for each section. Tickets are what’s used in software building to associate a task to an individual or team, &lt;a href=&quot;https://www.atlassian.com/agile/project-management/epics-stories-themes&quot; target=&quot;_blank&quot;&gt;if you don’t know&lt;/a&gt; 😉. This approach makes it easier to set internal deadlines for pre release builds that become ready for team testing, even if that team is you. You could also setup GIT flow to handle release organisation or create them manually from you master branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/blog/2019/organise-planet.jpeg&quot; alt=&quot;plan your projects&quot; class=&quot;img-med-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-files-and-structure&quot;&gt;2. Files and structure&lt;/h2&gt;
&lt;p&gt;An organised project should have organised codebase, right? Place groupings of files into folders with meaningful names, name your files correctly and follow platform guidelines. When the project contains 50+ files having a clean nested structure will be invaluable.&lt;/p&gt;

&lt;h2 id=&quot;3-localise-from-the-start&quot;&gt;3. Localise from the start&lt;/h2&gt;
&lt;p&gt;If you don’t think your app needs to be in another language you need to localise it. The app may pivot further in its lifecycle and be required to be in 11 other languages under an expansion plan. Mobile development is still reliant on baking strings into files and this creates a pain point when changing values later. Localising the project now will save you time make adding new languages easy, trust me!&lt;/p&gt;

&lt;h2 id=&quot;4-api-data&quot;&gt;4. API data&lt;/h2&gt;
&lt;p&gt;Most enterprise apps tend to have a Content Management System to handle content messages for text labels, buttons etc. This content is requested and stored on first launch allowing the company to change the text without App Store submission. When requesting an endpoint however generic responses such as errors are still sent in string format, decoupling them from the initial CMS content request. Using a format similar to below eliminates this issue and ultimately gives you a bandwidth save.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;References&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;within&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are other easy wins such as minimising your API’s functionality, this includes interogation of data (outside the remit of search and Oauth), passing full user objects back to update specific values, client side querying etc.&lt;/p&gt;

&lt;h2 id=&quot;5-realm-data-storage&quot;&gt;5. Realm data storage&lt;/h2&gt;
&lt;p&gt;Native database stores are a great way to handle persisted data across both major platforms. Interrogating data however on particular platforms is cumbersome without writing unecessary code. &lt;a href=&quot;https://realm.io/&quot; target=&quot;_blank&quot;&gt;Realm&lt;/a&gt; provides a way to handle your data storage both locally and within the cloud. There’s a studio app that UI testers can use for monitoring of data locally, especially app update migrations. There’s also &lt;a href=&quot;https://www.sqlite.org/index.html&quot; target=&quot;_blank&quot;&gt;SQLite&lt;/a&gt; for any old schoolers out there, but given the simplicity of Realm or native functionality you should be avoiding it.&lt;/p&gt;

&lt;h2 id=&quot;6-one-design-pattern&quot;&gt;6. One design pattern&lt;/h2&gt;
&lt;p&gt;A big issue when facing software development at scale using a team is conforming to a single design pattern. Developers tend to have their own preference over what’s the best approach for the project. MVC, MVVM, RxSwift are all great but there needs to be a concensus among the build teams. Include a README.md file that states this point and I would reject pull requests that don’t follow it. I can’t stress how important a concern this should be when starting the build or performing a rewrite. Cocoapods and libraries excluded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/blog/2019/code-smell.jpeg&quot; alt=&quot;have a single design pattern&quot; class=&quot;img-med-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-test-your-features&quot;&gt;7. Test your features&lt;/h2&gt;
&lt;p&gt;I’ve worked with developers who only unit test and developers who only device test. Whilst there’s no silver bullet to solve testing you really need to get your hands dirty. Interrogate the hell out of your code, don’t just code for your exact case and expect it to work 100/100.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example: If your feature includes location based services around geofences, actually go out with your laptop and test on a device.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No developer/entrepreneur should consider themselves the messiah of brackets, they will be humbled. Applications shouldn’t be in a position to crash and receive ⭐️ star reviews due to a lack of proper testing. In my opinion a seriously bad developer is one who doesn’t test, no matter how quick or awesome they think they are! TESTING IS NEEDED!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/blog/2019/test-production.jpeg&quot; alt=&quot;test properly&quot; class=&quot;img-med-center&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-have-a-developer-blog&quot;&gt;8. Have a developer blog&lt;/h2&gt;
&lt;p&gt;Developers occasionally like to know what other developers are doing and it’s important to keep the troops motivated. This can be an internal blog or something non brand affiliated. By having a place that developers can contribute to will speak volumes about your team and help facilitate future recruitment.&lt;/p&gt;

&lt;p&gt;Solo developers/entrepreneurs should also have a place to write their experiences down, medium for example.&lt;/p&gt;

&lt;h2 id=&quot;9-secure-it&quot;&gt;9. Secure it!&lt;/h2&gt;
&lt;p&gt;Security should be a major concern for any enterprise app who communicates data via a network. If you spent months building a product you intended to make a viable business out of wouldn’t you protect it the best way possible? An example of bad practice:&lt;/p&gt;

&lt;p&gt;I previously consulted at a company who were storing user credentials inside UserDefaults (A local storage mechanism for unsecure data in iOS) whilst also transmitting the same user data over HTTP. I quickly told them to change it!
It’s 2019 folks, use HTTPS and pin your certificate’s public key to the device, or even the certificate! For more information on security techniques please check out the following links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://infinum.co/the-capsized-eight/ssl-pinning-revisited&quot; target=&quot;_blank&quot;&gt;SSL pinning on iOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/articles/security-ssl.html&quot; target=&quot;_blank&quot;&gt;SSL pinning on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;10-review&quot;&gt;10. Review&lt;/h2&gt;
&lt;p&gt;Finally, take the time to review your code and look for repetition you can omit. If you’re at the MVP stage ensure you’re code doesn’t have any memory leaks or open holes leading your application to crash. You need to be 100% confident in the code you’ve implemented otherwise you shouldn’t release it. Even if you’re constrained by time.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Mobile development is an ever changing entity and by utilising some or all of the techniques above your app should be in a better position to handle users at scale. Keep security concerns at the forefront of development and remember to test features for failing cases as much as the positives. People tend to read reviews before they download apps and if you’re full of ⭐️ star reviews, your business will fail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally on Medium.&lt;/em&gt;&lt;/p&gt;</content><author><name>Jay Cohen</name></author><category term="iOS," /><category term="Enterprise," /><category term="Swift" /><summary type="html">1. Organise the project Before starting the project it’s important to know where to start (ancient proverb). Group dependent parts of your apps functionality and create tickets for each section. Tickets are what’s used in software building to associate a task to an individual or team, if you don’t know 😉. This approach makes it easier to set internal deadlines for pre release builds that become ready for team testing, even if that team is you. You could also setup GIT flow to handle release organisation or create them manually from you master branch.</summary></entry><entry><title type="html">10 Xcode &amp;amp; Swift tips every developer must know</title><link href="http://localhost:4000/blog/10-Xcode-&-swift-tips-every-developer-must-know" rel="alternate" type="text/html" title="10 Xcode &amp; Swift tips every developer must know" /><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><id>http://localhost:4000/blog/10-Xcode-&amp;-swift-tips-every-developer-must-know</id><content type="html" xml:base="http://localhost:4000/blog/10-Xcode-&amp;-swift-tips-every-developer-must-know">&lt;p&gt;Being an iOS developer for a number of years I’ve accumulated a bunch of Swift &amp;amp; Xcode tips to speed up the development process. The list below should be perfect for any IOS developer just starting out after a Udemy course or those looking to get the most out of wonderful Xcode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Looking for sounds for your app? Check out a new pack I’ve created with over 100 UI sounds for $7. http://soundsuigood.com/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;xcode--swift-tips&quot;&gt;Xcode &amp;amp; Swift tips&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Constantly learn and challenge yourself. I hate to sound cliche on the first tip but this is incredibly important. iOS and Swift are an ever changing entity and you’ll need to keep up with what’s happening. I’ve included a list at the end of invaluable resources that will help in keeping you up to date.&lt;/li&gt;
  &lt;li&gt;Use SwiftLint in your projects. SwiftLint is a tool to enforce coding standards based on the Swift style guide. Using this pod will make you code in a standard fashion.&lt;/li&gt;
  &lt;li&gt;Name your methods and files correctly. Apple has a guide on how to name your methods. If you follow this correctly your code comments should be minimal.&lt;/li&gt;
  &lt;li&gt;Include a README.md file. Use this file to list any cocoapods, custom configurations to your app. It will save you time in the long run for you and other developers.&lt;/li&gt;
  &lt;li&gt;Organise your files into directories. I favour the Stanford university approach to keep things clean and accessible. (The second lecture)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TEST, TEST, TEST&lt;/strong&gt;. Test driven development is a great way to ensure your code doesn’t break when you come to add features later. I use it for every project and have fallen foul when I haven’t. If you find test driven development hard to understand but want to implement something similar theres a great behaviour driven testing article written on Ray Wenderlich’s site.&lt;/li&gt;
  &lt;li&gt;Test UI actions and animations on a device. The simulator is great for proofing basic interactions but nothing beats actual device testing to check your UI animations.&lt;/li&gt;
  &lt;li&gt;Use an autoLayout library. There’s nothing wrong with using the standard API to layout constraints. These libraries exist to make it easier when it comes to animating or building complex layouts programmatically. Snapkit and Pure Layout are currently the most populat ones.&lt;/li&gt;
  &lt;li&gt;Quick open and assign to a window. Whilst the project navigator is a quick way to open files once you get in the “flow” you’ll end up wasting time searching through folders. Xcode has a handy “Quick open” feature that’s similar to Spotlight. To open a file press &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+shift+O&lt;/code&gt; and a handy search box will appear. Click the Swift icon to the right to only search through .swift files. Once you have a file selected &lt;code class=&quot;highlighter-rouge&quot;&gt;option+shift+enter&lt;/code&gt; to open the assign to a panel option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/blog/2019/xcode-open-quick.png&quot; alt=&quot;Xcode open quick&quot; class=&quot;img-med-center&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/blog/2019/xcode-fast-open.png&quot; alt=&quot;Xcode fast open&quot; class=&quot;img-med-center&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Show build times inside Xcode — I only adopted this recently and it helps. Simply paste the line below into the Terminal and relaunch Xcode.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;    &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowBuildOperationDuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;YES&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/blog/2019/xcode-run-speed.png&quot; alt=&quot;Xcode show build times&quot; class=&quot;img-med-center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;great-xcode-and-swift-leaning-resources&quot;&gt;Great Xcode and Swift leaning resources.&lt;/h3&gt;
&lt;p&gt;I won’t delve into the reasons why you should have these on your radar, I’ll leave that for you to discover. All I can say is that besides forums and wwdc videos these places are great sources of information and will certainly level up your skillset to the pro leagues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/&quot; target=&quot;_blank&quot;&gt;Apple documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackingwithswift.com/&quot; target=&quot;_blank&quot;&gt;Hacking with Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/&quot; target=&quot;_blank&quot;&gt;Ray Wenderlich&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.letsbuildthatapp.com/&quot; target=&quot;_blank&quot;&gt;Lets build that app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jay Cohen</name></author><category term="iOS," /><category term="Xcode," /><category term="Swift" /><summary type="html">Being an iOS developer for a number of years I’ve accumulated a bunch of Swift &amp;amp; Xcode tips to speed up the development process. The list below should be perfect for any IOS developer just starting out after a Udemy course or those looking to get the most out of wonderful Xcode.</summary></entry></feed>